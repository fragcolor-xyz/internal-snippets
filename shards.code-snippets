{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ Shard": {
		"scope": "cpp",
		"prefix": "shard",
		"body": [
			"struct ${0:SHARD_NAME} {",
			"  static SHTypesInfo inputTypes() { return CoreInfo::AnyType; }",
			"  static SHTypesInfo outputTypes() { return CoreInfo::AnyType; }",
			"  static SHOptionalString help() { return SHCCSTR(\"\"); }",
			"  ",
			"  PARAM_PARAMVAR(_someParam, \"RenameThis\", \"AddDescriptionHere\", {CoreInfo::AnyType});",
			"  PARAM_IMPL(PARAM_IMPL_FOR(_someParam));",
			"  ",
			"  void warmup(SHContext *context) {",
			"    PARAM_WARMUP(context);",
			"  }",
			"  ",
			"  void cleanup() {",
			"    PARAM_CLEANUP();",
			"  }",
			"  ",
			"  PARAM_REQUIRED_VARIABLES();",
			"  SHTypeInfo compose(SHInstanceData &data) {",
			"    PARAM_COMPOSE_REQUIRED_VARIABLES(data);",
			"    return CoreInfo::NoneType;",
			"  }",
			"  ",
			"  SHVar activate(SHContext *shContext, const SHVar &input) { return input; }",
			"};",
		],
		"description": "New C++ shard scaffolding"
	},
	"Rust Enum": {
		"scope": "rs",
		"prefix": "enum",
		"body": [
		"#[derive(shards::shards_enum)]",
		"#[enum_info(",
		"  b\"aaaa\",",
		"  \"${0:NAME}\",",
		"  \"${1:HELP_TEXT}\"",
		")]",
		"pub enum ${0:NAME} {",
		"  #[enum_value(\"DESCRIPTION\")]", 
		"  None = 0x0,",
		"}",
		],
		"description": "New rust enum scaffolding"
	}
}